name: Create League Workflow

on:
  workflow_dispatch:
    inputs:
      user_email:
        description: 'User Email'
        required: true
      league_name:
        description: 'League Name'
        required: true
      invitation_code:
        description: 'Invitation Code'
        required: true
      league_id:
        description: 'League ID'
        required: true

jobs:
  send-email:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install nodemailer

      - name: Send Invitation Email
        run: node sendEmail.js
        env:
          USER_EMAIL: ${{ github.event.inputs.user_email }}
          LEAGUE_NAME: ${{ github.event.inputs.league_name }}
          INVITATION_CODE: ${{ github.event.inputs.invitation_code }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

  create-table:
    runs-on: ubuntu-latest
    needs: send-email

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Supabase CLI
        run: npm install -g supabase

      - name: Create League Table
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_API_KEY }}
        run: |
          TABLE_NAME=$(echo ${{ github.event.inputs.league_name }} | tr -cd '[:alnum:]')
          supabase db query "CREATE TABLE public.${TABLE_NAME} (
            user_id uuid NOT NULL,
            total_attempts integer NOT NULL DEFAULT 0,
            games_played integer NOT NULL DEFAULT 0,
            average_attempts numeric GENERATED ALWAYS AS (
              (
                (total_attempts)::numeric / (NULLIF(games_played, 0))::numeric
              )
            ) STORED NULL,
            username character varying(255) NOT NULL,
            CONSTRAINT ${TABLE_NAME}_pkey PRIMARY KEY (user_id),
            CONSTRAINT ${TABLE_NAME}_user_id_key UNIQUE (user_id),
            CONSTRAINT ${TABLE_NAME}_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
          ) TABLESPACE pg_default;"
